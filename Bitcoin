#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 30 10:58:37 2017

@author: ejupsem
daily annualized volatility
lets do non-live vol
pretend these calcs are always done AMC, 0 is that day close
so 5 day calc uses 6 closes
0-1
1-2
2-3
3-4
4-5
next calc a universal tool?
is this censored or demeaned
create legend
inputs for vols, days back
date on x axis, not days ago
other currencies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

BTC = pd.read_csv('BTC_daily2.csv')
table = BTC[['Date','Close']]

yesterday = table[1:1677]
today = table[:-1]
today.columns = ['Date','Today']
yesterday.columns = ['Date2','Yesterday']
today = today.reset_index()
yesterday = yesterday.reset_index()
today = today[['Date','Today']]
yesterday = yesterday[['Date2','Yesterday']]
today = today.reset_index()
yesterday = yesterday.reset_index()
merged = pd.merge(today,yesterday,on='index')
merged['divided'] = merged['Today']/merged['Yesterday']
merged['ln'] = np.log(merged['divided'])
merged['5mean'] = -1
merged['10mean'] = -1
merged['21mean'] = -1
merged['63mean'] = -1
merged['126mean'] = -1
merged['5meandif'] = -1
merged['10meandif'] = -1
merged['21meandif'] = -1
merged['63meandif'] = -1
merged['126meandif'] = -1

count = 0
while count < len(merged) - 4:
    merged.loc[count,'5mean'] = merged.loc[count:count+4,"ln"].mean()
    merged.loc[count,'5meandif'] = merged.loc[count,'ln'] - merged.loc[count:count+4,"ln"].mean()
    count = count + 1

count = 0    
while count < len(merged) - 9:    
    merged.loc[count,'10mean'] = merged.loc[count:count+9,"ln"].mean()
    merged.loc[count,'10meandif'] = merged.loc[count,'ln'] - merged.loc[count:count+9,"ln"].mean()
    count = count + 1

count = 0
while count < len(merged) - 20:    
    merged.loc[count,'21mean'] = merged.loc[count:count+20,"ln"].mean()
    merged.loc[count,'21meandif'] = merged.loc[count,'ln'] - merged.loc[count:count+20,"ln"].mean()
    count = count + 1

count = 0
while count < len(merged) - 62:
    merged.loc[count,'63mean'] = merged.loc[count:count+62,"ln"].mean()
    merged.loc[count,'63meandif'] = merged.loc[count,'ln'] - merged.loc[count:count+62,"ln"].mean()
    count = count + 1

count = 0
while count < len(merged) - 125:
    merged.loc[count,'126mean'] = merged.loc[count:count+125,"ln"].mean()
    merged.loc[count,'126meandif'] = merged.loc[count,'ln'] - merged.loc[count:count+125,"ln"].mean()
    count = count + 1

merged['5meandifsq'] = np.square(merged['5meandif'])
merged['10meandifsq'] = np.square(merged['10meandif'])
merged['21meandifsq'] = np.square(merged['21meandif'])
merged['63meandifsq'] = np.square(merged['63meandif'])
merged['126meandifsq'] = np.square(merged['126meandif'])
merged['std5'] = -1
merged['std10'] = -1
merged['std21'] = -1
merged['std63'] = -1
merged['std126'] = -1

count = 0
while count < len(merged) - 4:
    merged.loc[count,'std5'] = np.sqrt(merged.loc[count:count+4,"5meandifsq"].sum()/4)
    count = count + 1

count = 0
while count < len(merged) - 9:
    merged.loc[count,'std10'] = np.sqrt(merged.loc[count:count+9,"10meandifsq"].sum()/9)
    count = count + 1

count = 0
while count < len(merged) - 20:
    merged.loc[count,'std21'] = np.sqrt(merged.loc[count:count+20,"21meandifsq"].sum()/20)
    count = count + 1

count = 0
while count < len(merged) - 62:
    merged.loc[count,'std63'] = np.sqrt(merged.loc[count:count+62,"63meandifsq"].sum()/62)
    count = count + 1

count = 0
while count < len(merged) - 125:
    merged.loc[count,'std126'] = np.sqrt(merged.loc[count:count+125,"126meandifsq"].sum()/125)
    count = count + 1

sq365 = np.sqrt(365)
merged['5vol'] = merged['std5'] * sq365 * 100
merged['10vol'] = merged['std10'] * sq365 * 100
merged['21vol'] = merged['std21'] * sq365 * 100
merged['63vol'] = merged['std63'] * sq365 * 100
merged['126vol'] = merged['std126'] * sq365 * 100

data_points = 365
t = np.arange(1,data_points+1,1)
t = np.flipud(t)
count = pd.DataFrame(data = t)
count.columns = ['Days ago']

#vol plot df
vol_table = merged[['index','Today','Date','5vol','10vol','21vol','63vol','126vol']]
vol_plot = vol_table[:data_points]
vol_plot2 = vol_plot.reindex(index=vol_plot.index[::-1]).reset_index()
vol_plot2 = vol_plot2[['Today','Date','5vol','10vol','21vol','63vol','126vol']].reset_index()

#vol plot
plt.plot(vol_plot2['index'],vol_plot2['5vol'],'b-',label='5_CC_C')
plt.plot(vol_plot2['index'],vol_plot2['10vol'],'g-',label='10_CC_C')
plt.plot(vol_plot2['index'],vol_plot2['21vol'],'r-',label='21_CC_C')
plt.plot(vol_plot2['index'],vol_plot2['63vol'],'c-',label='63_CC_C')
plt.plot(vol_plot2['index'],vol_plot2['126vol'],'m-',label='126_CC_C')
plt.ylabel('Vol')
plt.xlabel('Days Ago')
plt.grid(True)
plt.title('Bitcoin Hist Vol')
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()

#stock plot df
stock_table = merged[['index','Today']]
stock_plot = stock_table[:data_points]
stock_plot2 = stock_plot.reindex(index=stock_plot.index[::-1]).reset_index()
stock_plot2 = stock_plot2[['Today']].reset_index()

#stock plot
plt.plot(stock_plot2['index'],stock_plot2['Today'],'k',label='Bitcoin')
plt.ylabel('Bitcoin')
plt.xlabel('Days Ago')
plt.grid(True)
plt.title('Bitcoin Price')
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
#plt.rc('figure', figsize=(12, 8))
plt.show()
